// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.6.1
// source: accounts/accounts.proto

package accounts

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAccountsCreateAccounts = "/api.accounts.Accounts/CreateAccounts"
const OperationAccountsDeleteAccounts = "/api.accounts.Accounts/DeleteAccounts"
const OperationAccountsGetAccount = "/api.accounts.Accounts/GetAccount"
const OperationAccountsListAccounts = "/api.accounts.Accounts/ListAccounts"
const OperationAccountsUpdateAccounts = "/api.accounts.Accounts/UpdateAccounts"

type AccountsHTTPServer interface {
	CreateAccounts(context.Context, *CreateAccountsRequest) (*CreateAccountsReply, error)
	DeleteAccounts(context.Context, *DeleteAccountsRequest) (*DeleteAccountsReply, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error)
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsReply, error)
	UpdateAccounts(context.Context, *UpdateAccountsRequest) (*UpdateAccountsReply, error)
}

func RegisterAccountsHTTPServer(s *http.Server, srv AccountsHTTPServer) {
	r := s.Route("/")
	r.POST("/account", _Accounts_CreateAccounts0_HTTP_Handler(srv))
	r.POST("/account/update", _Accounts_UpdateAccounts0_HTTP_Handler(srv))
	r.DELETE("/account/{id}{", _Accounts_DeleteAccounts0_HTTP_Handler(srv))
	r.GET("/account/{id}{", _Accounts_GetAccount0_HTTP_Handler(srv))
	r.GET("/account", _Accounts_ListAccounts0_HTTP_Handler(srv))
}

func _Accounts_CreateAccounts0_HTTP_Handler(srv AccountsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAccountsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountsCreateAccounts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAccounts(ctx, req.(*CreateAccountsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAccountsReply)
		return ctx.Result(200, reply)
	}
}

func _Accounts_UpdateAccounts0_HTTP_Handler(srv AccountsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAccountsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountsUpdateAccounts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccounts(ctx, req.(*UpdateAccountsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAccountsReply)
		return ctx.Result(200, reply)
	}
}

func _Accounts_DeleteAccounts0_HTTP_Handler(srv AccountsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAccountsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountsDeleteAccounts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAccounts(ctx, req.(*DeleteAccountsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAccountsReply)
		return ctx.Result(200, reply)
	}
}

func _Accounts_GetAccount0_HTTP_Handler(srv AccountsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountsGetAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccount(ctx, req.(*GetAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAccountReply)
		return ctx.Result(200, reply)
	}
}

func _Accounts_ListAccounts0_HTTP_Handler(srv AccountsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAccountsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountsListAccounts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAccounts(ctx, req.(*ListAccountsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAccountsReply)
		return ctx.Result(200, reply)
	}
}

type AccountsHTTPClient interface {
	CreateAccounts(ctx context.Context, req *CreateAccountsRequest, opts ...http.CallOption) (rsp *CreateAccountsReply, err error)
	DeleteAccounts(ctx context.Context, req *DeleteAccountsRequest, opts ...http.CallOption) (rsp *DeleteAccountsReply, err error)
	GetAccount(ctx context.Context, req *GetAccountRequest, opts ...http.CallOption) (rsp *GetAccountReply, err error)
	ListAccounts(ctx context.Context, req *ListAccountsRequest, opts ...http.CallOption) (rsp *ListAccountsReply, err error)
	UpdateAccounts(ctx context.Context, req *UpdateAccountsRequest, opts ...http.CallOption) (rsp *UpdateAccountsReply, err error)
}

type AccountsHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountsHTTPClient(client *http.Client) AccountsHTTPClient {
	return &AccountsHTTPClientImpl{client}
}

func (c *AccountsHTTPClientImpl) CreateAccounts(ctx context.Context, in *CreateAccountsRequest, opts ...http.CallOption) (*CreateAccountsReply, error) {
	var out CreateAccountsReply
	pattern := "/account"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountsCreateAccounts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountsHTTPClientImpl) DeleteAccounts(ctx context.Context, in *DeleteAccountsRequest, opts ...http.CallOption) (*DeleteAccountsReply, error) {
	var out DeleteAccountsReply
	pattern := "/account/{id}{"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAccountsDeleteAccounts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountsHTTPClientImpl) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...http.CallOption) (*GetAccountReply, error) {
	var out GetAccountReply
	pattern := "/account/{id}{"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAccountsGetAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountsHTTPClientImpl) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...http.CallOption) (*ListAccountsReply, error) {
	var out ListAccountsReply
	pattern := "/account"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAccountsListAccounts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountsHTTPClientImpl) UpdateAccounts(ctx context.Context, in *UpdateAccountsRequest, opts ...http.CallOption) (*UpdateAccountsReply, error) {
	var out UpdateAccountsReply
	pattern := "/account/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountsUpdateAccounts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
